{"version":3,"sources":["component/EthiopianMap.js","component/WorldTable.js","utils/dateFormatter.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","table","minWidth","EthiopianMap","props","classes","useState","ethiopianStats","setStats","fetchCoronaStatsInEthiopia","a","fetch","data","json","res","console","error","useEffect","className","confirmed","TableContainer","component","Paper","Typography","title","variant","id","align","Table","aria-label","TableHead","TableRow","TableCell","TableBody","scope","value","recovered","deaths","maxWidth","WorldTable","stats","map","stat","i","key","countryRegion","Date","toLocaleString","App","fetchCoronaConfirmed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.627e2889.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./ethiopianmap.css\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 200\n  }\n});\n\nfunction EthiopianMap(props) {\n  const classes = useStyles();\n  const [ethiopianStats, setStats] = useState([]);\n\n  const fetchCoronaStatsInEthiopia = async () => {\n    try {\n      const data = await fetch(\"https://covid19.mathdro.id/api/countries/ET\");\n      const res = await data.json();\n      setStats(res);\n    } catch (error) {\n      console.error(\"Error: \", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchCoronaStatsInEthiopia();\n  }, []);\n\n  return (\n    <div className=\"ethipia\">\n      <div className=\"ethiopia__table\">\n        {ethiopianStats.confirmed ? (\n          <TableContainer component={Paper}>\n            <Typography\n              className={classes.title}\n              variant=\"h4\"\n              id=\"tableTitle\"\n              align=\"center\"\n            >\n              ኢትዮጵያ\n            </Typography>\n            <Table className={classes.table} aria-label=\"Ethiopia corona stats\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>በበሽታው የተጠቁ</TableCell>\n                  <TableCell>ያገገሙ</TableCell>\n                  <TableCell>ሞት</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"stat\">\n                    {ethiopianStats.confirmed.value}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                  {ethiopianStats.recovered.value}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                  {ethiopianStats.deaths.value}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </TableContainer>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default EthiopianMap;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\n\n\nimport { DateFormatter } from '../utils/dateFormatter';\n\nconst useStyles = makeStyles({\n  table: {\n    maxWidth: 600\n  }\n});\n\nfunction WorldTable(props) {\n  const classes = useStyles();\n  return (\n    <div className=\"data-table\">\n      {\n        props.stats[0] ? (\n          <>\n          <TableContainer component={Paper}>\n\n          <Typography\n              className={classes.title}\n              variant=\"h4\"\n              id=\"tableTitle\"\n              align=\"center\"\n            >\n              ዓለም አቀፍ ውሂብ\n            </Typography>\n          <Table className={classes.table} aria-label=\"world corona stats\">\n            <TableHead>\n              <TableRow>\n                <TableCell>ሀገር</TableCell>\n                <TableCell align=\"right\">በበሽታው የተጠቁ</TableCell>\n                <TableCell align=\"right\">ያገገሙ</TableCell>\n                <TableCell align=\"right\">ሞት</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {props.stats.map((stat, i) => (\n                <TableRow key={i}>\n                  <TableCell component=\"th\" scope=\"stat\">\n                    {stat.countryRegion}\n                  </TableCell>\n                  <TableCell align=\"right\">{stat.confirmed}</TableCell>\n                  <TableCell align=\"right\">{stat.recovered}</TableCell>\n                  <TableCell align=\"right\">{stat.deaths}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n  \n        <section>\n              <small>last updated: {props.stats[0] ? <h3>{DateFormatter(1584233582000)}</h3> : null}</small>\n        </section>\n        </>\n        ):\n        null\n      }\n    </div>\n  );\n}\n\nexport default WorldTable;\n","const DateFormatter = (utcDate) => {\n    const date = new Date(utcDate).toLocaleString();\n    return date;\n}\n\n\nexport { DateFormatter }","import React, {useState, useEffect} from 'react';\n\nimport EthiopianMap from './component/EthiopianMap';\nimport WorldTable from './component/WorldTable';\n\n\nconst App = () => {\n  const [stats, setStats] = useState([]);\n\n  const fetchCoronaConfirmed = async () => {\n      try {\n          const data = await fetch('https://covid19.mathdro.id/api/confirmed');\n          const res = await data.json();\n          setStats(res);\n      } catch (error) {\n          console.error(\"Error: \", error);\n      }\n  }\n\n  useEffect(() => {\n      fetchCoronaConfirmed();\n  },[]);\n\n  return (\n    <div className=\"app\">\n      <h1>የኮቪድ-19 ስታትስቲክስ</h1>\n      <EthiopianMap />\n      <WorldTable stats={stats}/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}